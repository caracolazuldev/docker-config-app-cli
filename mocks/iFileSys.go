// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	os "os"

	mock "github.com/stretchr/testify/mock"
)

// iFileSys is an autogenerated mock type for the iFileSys type
type iFileSys struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *iFileSys) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OpenFile provides a mock function with given fields: filename, flag, perm
func (_m *iFileSys) OpenFile(filename string, flag int, perm os.FileMode) (*os.File, error) {
	ret := _m.Called(filename, flag, perm)

	if len(ret) == 0 {
		panic("no return value specified for OpenFile")
	}

	var r0 *os.File
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, os.FileMode) (*os.File, error)); ok {
		return rf(filename, flag, perm)
	}
	if rf, ok := ret.Get(0).(func(string, int, os.FileMode) *os.File); ok {
		r0 = rf(filename, flag, perm)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*os.File)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, os.FileMode) error); ok {
		r1 = rf(filename, flag, perm)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteString provides a mock function with given fields: s
func (_m *iFileSys) WriteString(s string) (int, error) {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for WriteString")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (int, error)); ok {
		return rf(s)
	}
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(s)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// createOrAppendFile provides a mock function with given fields: filename, content
func (_m *iFileSys) createOrAppendFile(filename string, content string) error {
	ret := _m.Called(filename, content)

	if len(ret) == 0 {
		panic("no return value specified for createOrAppendFile")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(filename, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newIFileSys creates a new instance of iFileSys. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIFileSys(t interface {
	mock.TestingT
	Cleanup(func())
}) *iFileSys {
	mock := &iFileSys{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
